
+TCPMessageProxy = {
     Class = TCPSocketMessageProxyExample
    Port = 24681 //Compulsory. The port where to listen for the TCP messages.
}

+StateMachine = {
    Class = StateMachine
    +INITIAL = {
        Class = ReferenceContainer      
        +START = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "IDLE"
            Timeout = 0
          /*  +StartHttpServer = {
                Class = Message
                Destination = "WebServer"
                Function = "Start"
                Mode = ExpectsReply
            }*/            
            +ChangeToStateIdleMsg = {
                Class = Message
                Destination = RTApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = RTApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +IDLE = {
        Class = ReferenceContainer
        +GOTORUN = {
            Class = StateMachineEvent
            NextState = "RUN"
            NextStateError = "IDLE"
            Timeout = 0 
	    +OpenTreeMsg = {
                  Class = Message
                  Destination = "RTApp.Data.MDSWriter"
                  Function = OpenTree
                  Mode = ExpectsReply
                  +Parameters = {
                      Class = ConfigurationDatabase
                      param1 = -1
                      }
             }
                
            +SettingDiagnosticProtocol = {
                   Class = Message
                   Destination = "RTApp.Data.RFM"
                   Function = SettingDiagnosticProtocol
                   Mode = ExpectsReply 
             }   

            +ChangeToRunMsg = {
                Class = Message
                Destination = RTApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Run
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = RTApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = RTApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +RUN = {
        Class = ReferenceContainer
        +GOTOIDLE = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "IDLE"
            Timeout = 0         
            +MessageFlush = {
                  Class = Message
                  Destination = "RTApp.Data.MDSWriter"
                  Function = FlushSegments
                  Mode = ExpectsReply
            }
            +ChangeToIdleMsg = {
                  Class = Message
                  Destination = RTApp
                  Mode = ExpectsReply
                  Function = PrepareNextState
                  +Parameters = {
                     Class = ConfigurationDatabase
                     param1 = Idle
                   }
            }

           +StopCurrentStateExecutionMsg = {
                 Class = Message
                 Destination = RTApp
                 Function = StopCurrentStateExecution
                 Mode = ExpectReply
            }

           +StartNextStateExecutionMsg = {
                Class = Message
                Destination = RTApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }

        }   
    }
}


/*
External Clock.
External Gate. 
Triple  board.
*/

$RTApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
       
         +GAMTimerL = {
            Class = IOGAM
            InputSignals = {
                CounterL = {               DataSource = Timer Type = uint32 }                
                TimeL    = { Frequency = 1000 DataSource = Timer Type = uint32 }
            }
            OutputSignals = {
                CounterL = {               DataSource = DDB1   Type = uint32 }                
                TimeL =    {               DataSource = DDB1  Type = uint32 }            
            }
        }

       +GAMTimer = {
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = AD20xx_0
                    Type = uint32
                }
                Time = {
                    Frequency = 1000
                    DataSource = AD20xx_0
                    Type = uint32
                }
                ADC0_0 = {                  //At least one ADC input shall be specified.
                     Type = int16          //Mandatory. Only the uint16 type is supported. ERROR: in the .cpp there is the int16
                     DataSource = AD20xx_0
                     Samples= 250
                }
                ADC1_0 = { 
                     Type = int16 
                     DataSource = AD20xx_0
                     Samples= 250
                }
                ADC2_0 = { 
                     Type = int16 
                     DataSource = AD20xx_0
                     Samples= 250
                }
                ADC3_0 = { 
                     Type = int16 
                     DataSource = AD20xx_0
                     Samples= 250
                }
                ADC4_0 = { 
                     Type = int16 
                     DataSource = AD20xx_0
                     Samples= 250
                }
                ADC5_0 = { 
                     Type = int16 
                     DataSource = AD20xx_0
                     Samples= 250
                }
                ADC6_0 = { 
                     Type = int16 
                     DataSource = AD20xx_0
                     Samples= 250
                }
                ADC7_0 = { 
                     Type = int16 
                     DataSource = AD20xx_0
                     Samples= 250
                }
                ADC8_0 = { 
                     Type = int16 
                     DataSource = AD20xx_0
                     Samples= 250
                }
                ADC9_0 = { 
                     Type = int16 
                     DataSource = AD20xx_0
                     Samples= 250
                }
                ADC10_0 = { 
                     Type = int16 
                     DataSource = AD20xx_0
                     Samples= 250
                }
                ADC11_0 = { 
                     Type = int16 
                     DataSource = AD20xx_0
                     Samples= 250
                }
                ADC12_0 = { 
                     Type = int16 
                     DataSource = AD20xx_0
                     Samples= 250
                }
                ADC13_0 = { 
                     Type = int16 
                     DataSource = AD20xx_0
                     Samples= 250
                }
                ADC14_0 = { 
                     Type = int16 
                     DataSource = AD20xx_0
                     Samples= 250
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }                
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }     
                ADC0_0 = {                      //At least one ADC input shall be specified. NumberOfDimensions
                    Type = int16               //Mandatory. Only the uint16 type is supported. ERROR: in the .cpp there is the int16
                    NumberOfElements= 250
                    NumberOfDimensions = 1
                    DataSource = DDB1
                }
                ADC1_0 = { 
                    Type = int16 
                    NumberOfElements= 250
                    NumberOfDimensions = 1
                    DataSource = DDB1
                }
                ADC2_0 = { 
                    Type = int16 
                    NumberOfElements= 250
                    NumberOfDimensions = 1
                    DataSource = DDB1
                }
                ADC3_0 = { 
                    Type = int16 
                    NumberOfElements= 250
                    NumberOfDimensions = 1
                    DataSource = DDB1
                }
                ADC4_0 = { 
                    Type = int16 
                    NumberOfElements= 250
                    NumberOfDimensions = 1
                    DataSource = DDB1
                }
                ADC5_0 = { 
                    Type = int16 
                    NumberOfElements= 250
                    NumberOfDimensions = 1
                    DataSource = DDB1
                }
                ADC6_0 = { 
                    Type = int16 
                    NumberOfElements= 250
                    NumberOfDimensions = 1
                    DataSource = DDB1
                }
                ADC7_0 = { 
                    Type = int16 
                    NumberOfDimensions = 1
                    NumberOfElements= 250
                    DataSource = DDB1
                }
                ADC8_0 = { 
                    Type = int16 
                    NumberOfElements= 250
                    NumberOfDimensions = 1
                    DataSource = DDB1
                }
                ADC9_0 = { 
                    Type = int16 
                    NumberOfElements= 250
                    NumberOfDimensions = 1
                    DataSource = DDB1
                }
                ADC10_0 = { 
                    Type = int16 
                    NumberOfElements= 250
                    NumberOfDimensions = 1
                    DataSource = DDB1
                }
                ADC11_0 = { 
                    Type = int16 
                    NumberOfElements= 250
                    NumberOfDimensions = 1
                    DataSource = DDB1
                }
                ADC12_0 = { 
                    Type = int16 
                    NumberOfElements= 250
                    NumberOfDimensions = 1
                    DataSource = DDB1
                }
                ADC13_0 = { 
                    Type = int16 
                    NumberOfElements= 250
                    NumberOfDimensions = 1
                    DataSource = DDB1
                }
                ADC14_0 = { 
                    Type = int16 
                    NumberOfElements= 250
                    NumberOfDimensions = 1
                    DataSource = DDB1
                }
            }
        }
      




     

        +RFMInput = {
          Class = IOGAM
          InputSignals = {
		Counter= {             
		   DataSource = RFM 
		   Type = uint32 
		} 
		Time = {    
		   //Frequency = 1000 //0.1    
		   DataSource = RFM 
		   Type = uint32 
	        } 

		InputBuffer= { 
		   DataSource = RFM 
		   Type = uint8 
	           NumberOfElements = 1200 
                }
		RealTime = {   
		   DataSource = RFM 
		   Type = float64
		}
 
		Counters= { 
		   DataSource = RFM 
		   Type = uint8 
	           NumberOfElements = 12 
	           }
		Diagnostics= { 
		   DataSource = RFM 
		   Type = uint8 
		   NumberOfElements = 12 
	           }	 
	}
	OutputSignals = {
	  	CounterRFM = {
	  	    DataSource = DDB1 
	            Type = uint32 
	  	}   
	  	             
                TimeRFM = {  
        	     DataSource = DDB1 
        	     Type = uint32 
        	} 
     
	   	sin_from_RFM= { 
                      DataSource = DDB1  
	              Type = float32  
	              NumberOfElements = 100 
	        }	
                sin_copy_host47= {
                      DataSource = DDB1  
	              Type = float32  
	              NumberOfElements = 100 
	        }
                sin_copy_host253= { DataSource = DDB1  
	              Type = float32  
	              NumberOfElements = 100 
	        }
 		RealTime47 = {   
		      DataSource = DDB1
		      Type = float64
		}      
		C49 = {
	  	      DataSource = DDB1 
		      Type = uint32 
	  	}  
		C47 = {
	  	      DataSource = DDB1 
		      Type = uint32 
	  	}  
	  	C253 = {
	  	      DataSource = DDB1 
		      Type = uint32 
	  	}  
	  	D49 = {
	  	      DataSource = DDB1 
		      Type = float32 
	  	}  
		D47 = {
	  	      DataSource = DDB1 
		      Type = float32 
	  	} 	
	  	D253 = {
	  	      DataSource = DDB1 
		      Type = float32 
	  	}  
          }        
        }       
        +RFMOutput = {
	   Class = IOGAM
	   InputSignals = {

	    	sin_from_RFM= { 
                       DataSource = DDB1  
	               Type = float32  
	               NumberOfElements = 100 
	        }



	    }
            OutputSignals = {

	        OutputBuffer= {
	        	DataSource = RFM  
	        	Type = uint8 
	        	NumberOfElements = 400 
	        }		    
	    }        
        }
        +OneSample = {
            Class = IOGAM
            InputSignals = {	   
	          sin_copy_host47= {
                           DataSource = DDB1  
	        	   Type = float32 
	        	   NumberOfElements = 100 
	           }
	        	
	     }
	    OutputSignals = {
		    OtherSamples = 	{  
                           DataSource = DDB1 
		           Type =float32 
		           NumberOfElements = 99
		    }
		    OneSampleSin = 	{
                    DataSource = DDB1 
		    Type =float32 
		    NumberOfElements = 1
		    } 
	     }
        } 

/*   +GAMDisplayL= {
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
                CycleTime={
                    DataSource=Timings
                    Type=uint32
                    Alias="Run.Thread1_CycleTime"
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = LoggerDataSource
                    Type = uint32
                }
                Time = {
                    DataSource = LoggerDataSource
                    Type = uint32
                }
                CycleTime={
                   DataSource=LoggerDataSource
                   Type=uint32
                }
}
}*/

        +GAMDisplay= {
            Class = IOGAM            
            InputSignals = {
                     CounterRFM = {
                            DataSource = DDB1
                            Type = uint32
                     }
                     TimeRFM = {
                           DataSource = DDB1
                           Type = uint32
                     }
                     CycleTime={
                	   DataSource=Timings
                	   Type=uint32
                	   Alias="Run.Thread1_CycleTime"
                     }
                     RealTime47 = {   		      
		           DataSource = DDB1 
		           Type = float64
		     } 
                     C49 = {
                           DataSource = DDB1
                           Type = uint32
                     }
                     C47 = {
                           DataSource = DDB1
                           Type = uint32
                      }
                     C253 = {
                           DataSource = DDB1
                           Type = uint32
                     }
                     D49 = {
	  	           DataSource = DDB1 
		           Type = float32
	  	     }  
	             D47 = {
	  	          DataSource = DDB1 
		          Type = float32 
	  	     }  
	             D253 = {
	  	          DataSource = DDB1 
		          Type = float32 
	       	     }  
                     OneSampleSin =  {
                          DataSource = DDB1 
		          Type =float32 
		          NumberOfElements = 1
		     }
               
            } 
            OutputSignals = {
                    Counter = {
                         DataSource = MDSWriter
                         Type = uint32
               	         NumberOfElements= 1
             		 Samples=1
                    }
                   Time = {
                         DataSource = MDSWriter
                         Type = uint32
                	 NumberOfElements= 1
             		 Samples=1
                   }
  	           CycleTime={
                	DataSource=MDSWriter
                	Type=uint32
                	NumberOfElements= 1
             		Samples=1
                   } 
                   RealTime47 = {   
		        DataSource = MDSWriter
		        Type = float64
		    }        
                  C49 = {
                        DataSource = MDSWriter
                        Type = uint32
                }

                C47 = {
                        DataSource = MDSWriter
                        Type = uint32
                }

                C253 = {
                        DataSource = MDSWriter
                        Type = uint32
                } 
                D49 = {
	  	       DataSource = MDSWriter 
		       Type = float32 
	  	} 
	        D47 = {
	    	       DataSource = MDSWriter 
 	               Type = float32 
	  	}  	  	
	        D253 = {
	  	      DataSource = MDSWriter 
		      Type = float32
	  	}  
              	OneSampleSin =  { 
                      DataSource = MDSWriter 
		      Type =float32 
		      NumberOfElements = 1
		      Samples=1
		}

            }
        }
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
            Class = GAMDataSource
        }        
        +LoggerDataSource = {
            Class = LoggerDataSource
        }
        +Timings = {
            Class = TimingDataSource
        }
           
        
        +AD20xx_0 = {
             Class = AD20xxADC
             BoardId = 0 //Mandatory
             ClockSource = InternalTiming //Mandatory. Default is Internal. Possible values are: Internal, ExTimeBase, ExTimeBase_AFI0
             //SSIMode = Master
             TriggerSource = ExternalSMB //Internal //ExternalSMB //Internal //ExternalStar // ExternalSMB //ExternalStar //ExternalEXTD // Internal //ExternalEXTD //Internal //Mandatory. Default is Internal. Possible values are: Internal, ExternalEXTD, ExternalDIO
             ExecutionMode = RealTimeThread // //Optional. If not specified ExecutionMode=IndependentThread. If the execution mode is RealTimeThread the synchronisation is performed in the scope of the real-time thread. Otherwise if the mode is IndependentThread then a thread is spawned in order to synchronised with the CPU
             //CPUs = 0xf //Optional and only relevant if ExecutionMode==IndependentThread. CPU affinity for the thread which reads data from the board.
             ClockDivisor = 320  //20
             Cycles = 5000
             sleepTime = 0
             Model = 2022 
             Signals = {
                  Counter = {           //Mandatory. Number of ticks since last state change.
                      Type = uint32     //int32 also supported.
                  }
                  Time = {              //Mandatory. Elapsed time in micro-seconds since last state change.
                       Type = uint32    //int32 also supported.
                  }
                  ADC0_0 = {            //At least one ADC input shall be specified.
                      Type = int16     //Mandatory. Only the int16 type is supported. ERROR: in the .cpp there is the int16
                      ChannelId = 0     //Mandatory. The channel number.
                      InputRange= 10 //2.5    //Mandatory. Possible values: 2.5, 5, 10
                  }
                  ADC1_0 = {        
                      Type = int16  
                      ChannelId = 1 
                      InputRange= 10 
                  }
                  ADC2_0 = {        
                      Type = int16  
                      ChannelId = 2 
                      InputRange= 10 
                  }
                  ADC3_0 = {        
                      Type = int16  
                      ChannelId = 3 
                      InputRange= 10 
                  }
                  ADC4_0 = {        
                      Type = int16  
                      ChannelId = 4 
                      InputRange= 10 
                  }
                  ADC5_0 = {        
                      Type = int16  
                      ChannelId = 5 
                      InputRange= 10 
                  }
                  ADC6_0 = {        
                      Type = int16  
                      ChannelId = 6 
                      InputRange= 10 
                  }
                  ADC7_0 = {        
                      Type = int16  
                      ChannelId = 7 
                      InputRange= 10 
                  }
                  ADC8_0 = {        
                      Type = int16  
                      ChannelId = 8 
                      InputRange= 10 
                  }
                  ADC9_0 = {        
                      Type = int16  
                      ChannelId = 9 
                      InputRange= 10 
                  }
                  ADC10_0 = {        
                      Type = int16  
                      ChannelId = 10
                      InputRange= 10 
                  }
                  ADC11_0 = {        
                      Type = int16  
                      ChannelId = 11 
                      InputRange= 10 
                  }
                  ADC12_0 = {        
                      Type = int16  
                      ChannelId = 12 
                      InputRange= 10 
                  }
                  ADC13_0 = {        
                      Type = int16  
                      ChannelId = 13 
                      InputRange= 10 
                  }
                  ADC14_0 = {        
                      Type = int16  
                      ChannelId = 14 
                      InputRange= 10 
                  }
             }
      
           //  +TermMessage1 = { Class=Message Destination=StateMachine Function=GOTOIDLE }
         }
        









	
    +RFM = {
        Class = RFM2g
        ExecutionMode =IndependentThread //Optional. If not set ExecutionMode = IndependentThread. If ExecutionMode == IndependentThread a thread is spawned to generate the time events. ExecutionMode == RealTimeThread the time is generated in the context of the real-time thread.
        CPUMask = 0x2 //Optional and only relevant if ExecutionMode=IndependentThread
        Device = /dev/rfm2g0 // Mandatory, the Linux device handling the RFM card installed on the system
        ReadOffset = 4096// Mandatory, the offset in bytes of the read starting point in the RF memory
        WriteOffset = 4496 // Mandatory, the offset in bytes of the write starting point in the RF memory
    
        UseDMA = 1// Optional, if 1 data exchange will be performed using DMA, if 0 with programmed IO. Default = 0
        DMABufferAddress = 0x1f3600000 //0x3aec00000 // Required if UseDMA=1, physical address (BEWARE, NOT VIRTUAL, i.e. coming from cat /proc/iomem) of the kernel reserved DMA memory buffer (see node (1))
        WaitDMA = 1 // Required if UseDMA=1, if 0 the DataSource launches DMA read/write transactions without waiting for them to be completed. If 1 it waits for them. (see node (2))
        DMABufferSize = 4096//1024 // The DMA buffer size
        DMAThreshold = 32 // The DMA threshold after which DMA must be used (bytes)
            
      //  Synchronizing = 1 // Optional, if 1 the DataSource synchronizes the calling thread using SPC synchronization protocol, if 0 it doesn't synchronize and only exchanges data. Default = 0
        //BasePeriod = 1e-4 // Required if Synchronizing=1, the base period of the RFM synchronization clock (coming from the RFM master mode)
        DownSampleFactor = 10 // Required if Synchronizing=1, the downsample factor for synchronization strobes
        StartTime =0 //20000 // Required if Synchronizing=1, the start time at which the DataSource will begin to synchronize
    	InitRunTime=0
        Master = 0// Optinal, if 1 the node is the RFM synchronizing node, i.e. sends the system time around the RFM ring. Default = 0
        NumberOfHosts=3
        Cycles= 100000
        sleepTime=0 //Optional. Sleep time (in microseconds) for polling operations. Defaulut 10
        TimeOut=20 // Optionl.  Time out (in microseconds) to wait for hosts writing operations. Dafault is 1 second (i.e., 1000000)
        NodeIdNumber=1 //Required. For the master always NodeIdNumber=0. For the slaves, a consecutive exclusive integer number, from 1 to ... NumberOfHosts-1
        	
  	
  
        //InputEnabled = 1  // To be implemented
        //Outputenabled = 1 // To be implemented
	
	    Signals = {
	        Counter        = { Type = uint32 }
                  Time            = { Type = uint32 }                
      	        InputBuffer     = { Type = uint8  NumberOfElements = 1200 }
	        OutputBuffer    = { Type = uint8  NumberOfElements = 400 }
	        RealTime        = { Type = float64 }
	        Counters         = { Type = uint8 NumberOfElements = 12 }
	        Diagnostics      = { Type = uint8 NumberOfElements = 12 }
	        
	        
	        
       	    }
        //        +TermMessage1 = { Class=Message Destination=StateMachine Function=GOTOIDLE }
    }

    +MDSWriter = {
	            Class = MDSWriter
	            NumberOfBuffers = 100000 //Compulsory. Number of buffers in the circular buffer defined above. Each buffer is capable of holding a copy of all the DataSourceI signals.
	            CPUMask = 4 //Compulsory. Affinity assigned to the threads responsible for asynchronously flush data into the MDSplus database.
	            StackSize = 10000000 //Compulsory. Stack size of the thread above.
	            TreeName = "slave47tree" //Compulsory. Name of the MDSplus tree.
	          //  PulseNumber = 0 //Optional. If -1 a new pulse will be created and the MDSplus pulse number incremented.
	            StoreOnTrigger = 0 //Compulsory. If 0 all the data in the circular buffer is continuously stored. If 1 data is stored when the Trigger signal is 1 (see below).
	            EventName = "updatejScope" //Compulsory. Event sent to jScope when TimeRefresh seconds have elapsed.
	            TimeRefresh = 100 //Compulsory. An event with the name set in the property EventName is sent to jScope when TimeRefresh seconds have elapsed.
	            Signals = {
	                Time = { //As many as required.
	                    NodeName = "TIME" //Compulsory. MDSplus node name
	                    Period = 0.001 //Compulsory. Period between signal samples.
	                    AutomaticSegmentation = 0
	                    MakeSegmentAfterNWrites = 10000
	                }
	                 Counter= { //As many as required.
	                    NodeName = "COUNTER47" //Compulsory. MDSplus node name
	                    Period = 0.001 //Compulsory. Period between signal samples.
	                    AutomaticSegmentation = 0
	                    MakeSegmentAfterNWrites = 10000
	                }
	                CycleTime = { //As many as required.
	                    NodeName = "CYCLETIME" //Compulsory. MDSplus node name
	                    Period = 0.001 //Compulsory. Period between signal samples.
	                    AutomaticSegmentation = 0
	                    MakeSegmentAfterNWrites = 10000
	                }
	             
	                RealTime47= { //As many as required.
	                    NodeName = "REALTIME47" //Compulsory. MDSplus node name
	                    Period = 0.001 //Compulsory. Period between signal samples.
	                    AutomaticSegmentation = 0
	                    MakeSegmentAfterNWrites = 10000
	                }
	                
	                	             
	                
                        C49= { //As many as required.
                            NodeName = "C49" //Compulsory. MDSplus node name
                            Period = 0.001 //Compulsory. Period between signal$
                            AutomaticSegmentation = 0
                            MakeSegmentAfterNWrites = 10000
                        }

                        C47= { //As many as required.
                            NodeName = "C47" //Compulsory. MDSplus node name
                            Period = 0.001 //Compulsory. Period between signal$
                            AutomaticSegmentation = 0
                            MakeSegmentAfterNWrites = 10000
                       }
                       C253= { //As many as required.
                            NodeName = "C253" //Compulsory. MDSplus node name
                            Period = 0.001 //Compulsory. Period between signal$
                            AutomaticSegmentation = 0
                            MakeSegmentAfterNWrites = 10000
                       }
                       D49= { //As many as required.
                            NodeName = "D49" //Compulsory. MDSplus node name
                            Period = 0.001 //Compulsory. Period between signal$
                            AutomaticSegmentation = 0
                            MakeSegmentAfterNWrites = 10000
                      }
                      D47= { //As many as required.
                            NodeName = "D47" //Compulsory. MDSplus node name
                            Period = 0.001 //Compulsory. Period between signal$
                            AutomaticSegmentation = 0
                            MakeSegmentAfterNWrites = 10000
                      }
                      D253= { //As many as required.
                            NodeName = "D253" //Compulsory. MDSplus node name
                            Period = 0.001 //Compulsory. Period between signal$
                            AutomaticSegmentation = 0
                            MakeSegmentAfterNWrites = 10000
                       }
                      OneSampleSin= { //As many as required.
                            NodeName = "SINREAD" //Compulsory. MDSplus node name
                            Period = 0.001 //Compulsory. Period between signal$
                            AutomaticSegmentation = 0
                            MakeSegmentAfterNWrites = 10000
                      }

	            }
	        }
	        
	 +Timer = {
            //Class = LinuxTimer
            Class = LinuxTimer::TerminatorLinuxTimer
            SleepNature = "Default"  //"Busy"
            //SleepNature = "Default"
            ExecutionMode = RealTimeThread
           // ExecutionMode = IndependentThread
            CPUMask = 0x01
            //IncrementsPerCycle = 100 // If not defined it is taken from the configured Timer frequency
            //StartTime=-1.0 // If not set starttime is 0
            //StopTime=4.0 // If not set runs indefinitely
            //StopTime=10.0// If not set runs indefinitely
            
            SkipTimer=0 // If 1 runs at maximum possible speed w/o using any timer at all 
            Signals = { 
                CounterL = { Type = uint32 }
                TimeL = { Type = uint32 }
            }
           // +TermMessage1 
           }
  
	  
   
    }
    +States = {
        Class = ReferenceContainer
         +Idle = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread CPUs = 0x8 
                    Functions = {
                     GAMTimerL 
                     //LoggerBroker 
                    }
                }
            }
        }                
        +Run = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
	            //StackSize = 24576

                    CPUs = 0x8
                    Functions = {GAMTimer RFMInput  RFMOutput OneSample  GAMDisplay }  
                }
            }
        }        
    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}


	
