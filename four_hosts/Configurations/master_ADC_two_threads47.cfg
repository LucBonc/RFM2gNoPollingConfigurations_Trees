
+TCPMessageProxy = {
    Class = TCPSocketMessageProxyExample
    Port = 24681 //Compulsory. The port where to listen for the TCP messages.
}

+StateMachine = {
    Class = StateMachine
    +INITIAL = {
        Class = ReferenceContainer
        +START = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "IDLE"
            Timeout = 0
            /*  +StartHttpServer = {
             Class = Message
             Destination = "WebServer"
             Function = "Start"
             Mode = ExpectsReply
             }*/
            +ChangeToStateIdleMsg = {
                Class = Message
                Destination = RTApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = RTApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +IDLE = {
        Class = ReferenceContainer
        +GOTORUN = {
            Class = StateMachineEvent
            NextState = "RUN"
            NextStateError = "IDLE"
            Timeout = 0
            +OpenTreeMsg = {
                Class = Message
                Destination = "RTApp.Data.MDSWriter"
                Function = OpenTree
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = -1
                }
            }

            +SettingDiagnosticProtocol = {
                Class = Message
                Destination = "RTApp.Data.RFM"
                Function = SettingDiagnosticProtocol
                Mode = ExpectsReply
            }
            +ChangeToRunMsg = {
                Class = Message
                Destination = RTApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Run
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = RTApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = RTApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +RUN = {
        Class = ReferenceContainer
        +GOTOIDLE = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "IDLE"
            Timeout = 0
            +MessageFlush = {
                Class = Message
                Destination = "RTApp.Data.MDSWriter"
                Function = FlushSegments
                Mode = ExpectsReply
            }
            +ChangeToIdleMsg = {
                Class = Message
                Destination = RTApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = RTApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = RTApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
}

$RTApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
        +GAMTimerL = {
            Class = IOGAM
            InputSignals = {
                CounterL = {DataSource = Timer Type = uint32}
                TimeL = {Frequency = 1000 DataSource = Timer Type = uint32}
            }
            OutputSignals = {
                CounterL = {DataSource = DDB1 Type = uint32}
                TimeL = {DataSource = DDB1 Type = uint32}
            }
        }
        +GAMTimer = {
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = AD20xx_0
                    Type = uint32
                }
                Time = {
                    Frequency = 10000 //1
                    DataSource = AD20xx_0
                    Type = uint32
                }
                ADC0_0 = { //At least one ADC input shall be specified.
                    Type = uint16//Mandatory. Only the uint16 type is supported. ERROR: in the .cpp there is the int16
                    DataSource = AD20xx_0
                    Samples= 200

                }

                ADC1_0 = { //At least one ADC input shall be specified.
                    Type = uint16//Mandatory. Only the uint16 type is supported. ERROR: in the .cpp there is the int16
                    DataSource = AD20xx_0
                    Samples= 200

                }

                ADC2_0 = { //At least one ADC input shall be specified.
                    Type = uint16//Mandatory. Only the uint16 type is supported. ERROR: in the .cpp there is the int16
                    DataSource = AD20xx_0
                    Samples= 200

                }

                ADC3_0 = { //At least one ADC input shall be specified.
                    Type = uint16//Mandatory. Only the uint16 type is supported. ERROR: in the .cpp there is the int16
                    DataSource = AD20xx_0
                    Samples= 200

                }

            }
            OutputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
                ADC0_0 = { //At least one ADC input shall be specified.
                    Type = uint16//Mandatory. Only the uint16 type is supported. ERROR: in the .cpp there is the int16
                    NumberOfElements= 200
                    DataSource = DDB1
                }

                ADC1_0 = { //At least one ADC input shall be specified.
                    Type = uint16//Mandatory. Only the uint16 type is supported. ERROR: in the .cpp there is the int16
                    NumberOfElements= 200
                    DataSource = DDB1
                }

                ADC2_0 = { //At least one ADC input shall be specified.
                    Type = uint16//Mandatory. Only the uint16 type is supported. ERROR: in the .cpp there is the int16
                    NumberOfElements= 200
                    DataSource = DDB1
                }

                ADC3_0 = { //At least one ADC input shall be specified.
                    Type = uint16//Mandatory. Only the uint16 type is supported. ERROR: in the .cpp there is the int16
                    NumberOfElements= 200
                    DataSource = DDB1
                }

            }
        }
        +MultiSinGAM = {
            Class = MultiSinGAM
            SinAmpl = 20 //1536.0 //1024.0
            SinFreq = 70//1000
            SinPhase = 0
            SinOff = 10
            CycleTime = 0.0001
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
            }
            OutputSignals = {
                SinWave = {
                    DataSource = DDB1
                    Type = float32
                    NumberOfElements= 100
                }
            }
        }
        +RFMOutput = {
            Class = IOGAM
            InputSignals = {
                Counter= {
                    DataSource = DDB1
                    Type = uint32
                }
                Time= {
                    DataSource = DDB1
                    Type = uint32
                }
                SinWave = {
                    DataSource = DDB1
                    Type = float32
                    NumberOfElements= 100
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = RFM
                    Type = uint32
                }
                Time = {
                    DataSource = RFM
                    Type = uint32
                }
                OutputBuffer= {
                    DataSource = RFM
                    Type = uint8
                    NumberOfElements = 400 //RR
                }
            }
        }
        +RFMInput = {
            Class = IOGAM
            InputSignals = {
                InputBuffer= {
                    DataSource = RFM
                    Type = uint8
                    NumberOfElements = 1600 //RR
                }
                RealTime= {
                    DataSource = RFM
                    Type = float64
                    NumberOfElements = 1
                }

                Counters= {
                    DataSource = RFM
                    Type = uint8
                    NumberOfElements = 16
                }
                Diagnostics= {
                    DataSource = RFM
                    Type = uint8
                    NumberOfElements = 16
                }
            }
            OutputSignals = {

                sin_copy_self= {
                    DataSource = DDB1
                    Type = float32
                    NumberOfElements = 100
                }
                sin_copy_host47= {
                    DataSource = DDB1
                    Type = float32
                    NumberOfElements = 100
                }
                sin_copy_host253= {
                    DataSource = DDB1
                    Type = float32
                    NumberOfElements = 100
                }
                sin_copy_host47_bis= {
                    DataSource = DDB1
                    Type = float32
                    NumberOfElements = 100
                }

                RealTime49= {
                    DataSource = DDB1
                    Type = float64
                    NumberOfElements = 1
                }
                C49 = {
                    DataSource = DDB1
                    Type = uint32
                }
                C47 = {
                    DataSource = DDB1
                    Type = uint32
                }
                C253 = {
                    DataSource = DDB1
                    Type = uint32
                }
                C47_bis = {
                    DataSource = DDB1
                    Type = uint32
                }

                D49 = {
                    DataSource = DDB1
                    Type = float32
                }
                D47 = {
                    DataSource = DDB1
                    Type = float32
                }
                D253 = {
                    DataSource = DDB1
                    Type = float32
                }
                D47_bis = {
                    DataSource = DDB1
                    Type = float32
                }

            }
        }
        +OneSample = {
            Class = IOGAM
            InputSignals = {
                sin_copy_self= {
                    DataSource = DDB1
                    Type = float32
                    NumberOfElements = 100
                }
            }
            OutputSignals = {
                OneSampleSin = {
                    DataSource = DDB1
                    Type =float32
                    NumberOfElements = 1
                }
                OtherSamples = {
                    DataSource = DDB1
                    Type =float32
                    NumberOfElements = 99
                }
            }
        }
        +GAMDisplay= {
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
                CycleTime= {
                    DataSource=Timings
                    Type=uint32
                    Alias="Run.Thread1_CycleTime"
                }
                RealTime49= {
                    DataSource = DDB1
                    Type = float64
                }

                /*             ADC0_0={
                 DataSource = DDB1
                 Type =uint16
                 NumberOfElements= 200
                 }

                 ADC1_0={ 
                 DataSource = DDB1
                 Type =uint16
                 NumberOfElements= 200
                 }
                 ADC2_0={ 
                 DataSource = DDB1
                 Type =uint16
                 NumberOfElements= 200
                 }


                 */

                C49 = {
                    DataSource = DDB1
                    Type = uint32
                }
                C47 = {
                    DataSource = DDB1
                    Type = uint32
                }
                C253 = {
                    DataSource = DDB1
                    Type = uint32
                }
                C47_bis = {
                    DataSource = DDB1
                    Type = uint32
                }
                D49 = {
                    DataSource = DDB1
                    Type = float32
                }
                D47 = {
                    DataSource = DDB1
                    Type = float32
                }
                D253 = {
                    DataSource = DDB1
                    Type = float32
                }
                D47_bis = {
                    DataSource = DDB1
                    Type = float32
                }

                SinWave = {
                    DataSource = DDB1
                    Type = float32
                    NumberOfElements= 100
                }
                OneSampleSin = {
                    DataSource = DDB1
                    Type =float32
                    NumberOfElements = 1
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = MDSWriter
                    Type = uint32
                }
                Time = {
                    DataSource = MDSWriter
                    Type = uint32
                }
                CycleTime= {
                    DataSource=MDSWriter
                    Type=uint32
                }
                RealTime49= {
                    DataSource = MDSWriter
                    Type = float64
                }

                /*
                 ADC0_0={
                 DataSource = MDSWriter
                 Type = uint16
                 NumberOfElements= 1
                 Samples=200
                 }
                 ADC1_0={
                 DataSource = MDSWriter
                 Type = uint16
                 NumberOfElements= 1
                 Samples=200
                 }
                 ADC2_0={
                 DataSource = MDSWriter
                 Type = uint16
                 NumberOfElements= 1
                 Samples=200
                 }

                 */

                C49 = {
                    DataSource = MDSWriter
                    Type = uint32
                }
                C47 = {
                    DataSource = MDSWriter
                    Type = uint32
                }
                C253 = {
                    DataSource = MDSWriter
                    Type = uint32
                }
                C47_bis = {
                    DataSource = MDSWriter
                    Type = uint32
                }

                D49 = {
                    DataSource = MDSWriter
                    Type = float32
                }
                D47 = {
                    DataSource = MDSWriter
                    Type = float32
                }
                D253 = {
                    DataSource = MDSWriter
                    Type = float32
                }
                D47_bis = {
                    DataSource = MDSWriter
                    Type = float32
                }

                SinWave = {
                    DataSource = MDSWriter
                    Type = float32
                    NumberOfElements= 1
                    Samples=100
                }
                OneSampleSin = {
                    DataSource = MDSWriter
                    Type =float32
                    NumberOfElements = 1
                    Samples=1
                }
            }
        }
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
            Class = GAMDataSource
        }
        +LoggerDataSource = {
            Class = LoggerDataSource
        }
        +Timings = {
            Class = TimingDataSource
        }
        +AD20xx_0 = {
            Class = AD20xxADC
            BoardId = 1 //Mandatory
            Model = 2010//Mandatory (between 2010,2205,2022,2020)
            ClockSource=InternalTiming//Mandatory. Default is Internal. Possible values are: Internal, ExTimeBase, ExTimeBase_AFI0
            TriggerSource= Internal//ExternalEXTD //Internal //Mandatory. Default is Internal. Possible values are: Internal, ExternalEXTD, ExternalDIO
            ExecutionMode = RealTimeThread// //Optional. If not specified ExecutionMode=IndependentThread. If the execution mode is RealTimeThread the synchronisation is performed in the scope of the real-time thread. Otherwise if the mode is IndependentThread then a thread is spawned in order to synchronised with the CPU
            //CPUs = 0xf //Optional and only relevant if ExecutionMode==IndependentThread. CPU affinity for the thread which reads data from the board.
            ClockDivisor= 20//200000
            sleepTime=3
            Signals = {
                Counter = { //Mandatory. Number of ticks since last state change.
                    Type = uint32//int32 also supported.
                }
                Time = { //Mandatory. Elapsed time in micro-seconds since last state change.
                    Type = uint32//int32 also supported.
                }
                ADC0_0 = { //At least one ADC input shall be specified.
                    Type = uint16//Mandatory. Only the uint16 type is supported. ERROR: in the .cpp there is the int16
                    ChannelId = 0//Mandatory. The channel number.
                    InputRange=10//Mandatory. Possible values: 2.5, 5, 10
                }
                ADC1_0 = { //At least one ADC input shall be specified.
                    Type = uint16//Mandatory. Only the uint16 type is supported.
                    ChannelId = 1//Mandatory. The channel number.
                    InputRange=5//Mandatory. Possible values: 2.5, 5, 10
                }
                ADC2_0 = { //At least one ADC input shall be specified.
                    Type = uint16//Mandatory. Only the uint16 type is supported.
                    ChannelId = 2//Mandatory. The channel number.
                    InputRange=5//Mandatory. Possible values: 2.5, 5, 10
                }
                ADC3_0 = { //At least one ADC input shall be specified.
                    Type = uint16//Mandatory. Only the uint16 type is supported.
                    ChannelId = 3//Mandatory. The channel number.
                    InputRange=5//Mandatory. Possible values: 2.5, 5, 10
                }
            }
        }
        +RFM = {
            Class = RFM2g
            ExecutionMode = RealTimeThread //Optional. If not set ExecutionMode = IndependentThread. If ExecutionMode == IndependentThread a thread is spawned to generate the time events. ExecutionMode == RealTimeThread the time is generated in the context of the real-time thread.
            CPUMask = 0x8//Optional and only relevant if ExecutionMode=IndependentThread
            Device = /dev/rfm2g0// Mandatory, the Linux device handling the RFM card installed on the system
            MasterStepMaxRetries=100//Optional and only relevan for Master. Default 100
            ReadOffset = 4096// Mandatory, the offset in bytes of the read starting point in the RF memory 
            WriteOffset = 4096// Mandatory, the offset in bytes of the write starting point in the RF memory (Rmember: aways start after 4096)

            UseDMA = 1// Optional, if 1 data exchange will be performed using DMA, if 0 with programmed IO. Default = 0
            DMABufferAddress = 0x1f3600000//0x3aec00000 // Required if UseDMA=1, physical address (BEWARE, NOT VIRTUAL, i.e. coming from cat /proc/iomem) of the kernel reserved DMA memory buffer (see node (1))
            WaitDMA = 1// Required if UseDMA=1, if 0 the DataSource launches DMA read/write transactions without waiting for them to be completed. If 1 it waits for them. (see node (2))
            DMABufferSize = 4896// The DMA buffer size
            DMAThreshold = 32// The DMA threshold after which DMA must be used (bytes)

            //Synchronizing = 0 // Optional, if 1 the DataSource synchronizes the calling thread using SPC synchronization protocol, if 0 it doesn't synchronize and only exchanges data. Default = 0
            //BasePeriod = 1e-4 // Required if Synchronizing=1, the base period of the RFM synchronization clock (coming from the RFM master mode)
            DownSampleFactor = 1// Required if Synchronizing=1, the downsample factor for synchronization strobes
            StartTime = 0// Required if Synchronizing=1, the start time at which the DataSource will begin to synchronize

            Master = 1// Optional, if 1 the node is the RFM synchronizing node, i.e. sends the system time around the RFM ring. Default = 0. Note that one and only one master must be defined!
            InitRunTime =0// 1000000

            NumberOfHosts=4// Mandatory. Number of host on the RFM
            TimeOut=40// Optionl.  Time out (in microseconds) to wait for hosts writing operations. Dafault is 1 second (i.e., 1000000)

            NodeIdNumber=0//Required. For the master always NodeIdNumber=0. For the slaves, a consecutive exclusive integer number, from 1 to ... NumberOfHosts-1

            //InputEnabled = 1  // To be implemented
            //Outputenabled = 1 // To be implemented

            Signals = {
                Counter = {Type = uint32}
                Time = {Type = uint32}
                InputBuffer = {Type = uint8 NumberOfElements = 1600}  //RR
                OutputBuffer = {Type = uint8 NumberOfElements =400}   //RR
                RealTime = {Type = float64}
                Counters = {Type = uint8 NumberOfElements = 16}
                Diagnostics = {Type = uint8 NumberOfElements = 16}
            }
        }
        +MDSWriter = {
            Class = MDSWriter
            NumberOfBuffers = 100000 //Compulsory. Number of buffers in the circular buffer defined above. Each buffer is capable of holding a copy of all the DataSourceI signals.
            CPUMask = 2//Compulsory. Affinity assigned to the threads responsible for asynchronously flush data into the MDSplus database.
            StackSize = 10000000//Compulsory. Stack size of the thread above.
            TreeName = "mastertree"//Compulsory. Name of the MDSplus tree.
            //PulseNumber = 0 //Optional. If -1 a new pulse will be created and the MDSplus pulse number incremented.
            StoreOnTrigger = 0//Compulsory. If 0 all the data in the circular buffer is continuously stored. If 1 data is stored when the Trigger signal is 1 (see below).
            EventName = "updatejScope"//Compulsory. Event sent to jScope when TimeRefresh seconds have elapsed.
            TimeRefresh = 5//Compulsory. An event with the name set in the property EventName is sent to jScope when TimeRefresh seconds have elapsed.
            Signals = {
                Time = { //As many as required.
                    NodeName = "TIME"//Compulsory. MDSplus node name
                    Period = 0.0001//Compulsory. Period between signal samples.
                    AutomaticSegmentation = 0
                    MakeSegmentAfterNWrites = 100000
                }
                Counter= { //As many as required.
                    NodeName = "COUNTER49"//Compulsory. MDSplus node name
                    Period = 0.0001//Compulsory. Period between signal samples.
                    AutomaticSegmentation = 0
                    MakeSegmentAfterNWrites = 100000
                }

                CycleTime = { //As many as required.
                    NodeName = "CYCLETIME"//Compulsory. MDSplus node name
                    Period = 0.0001//Compulsory. Period between signal samples.
                    AutomaticSegmentation = 0
                    MakeSegmentAfterNWrites = 100000
                }
                RealTime49 = { //As many as required.
                    NodeName = "REALTIME49"//Compulsory. MDSplus node name
                    Period = 0.0001//Compulsory. Period between signal samples.
                    AutomaticSegmentation = 0
                    MakeSegmentAfterNWrites = 100000
                }
                /*   ADC0_0 = { //As many as required.
                 NodeName = "DATA0"  //Compulsory. MDSplus node name
                 Period = 0.0000005 //Compulsory. Period between signal samples.
                 AutomaticSegmentation = 0
                 MakeSegmentAfterNWrites = 100000
                 }
                 ADC1_0 = { //As many as required.
                 NodeName = "DATA1"  //Compulsory. MDSplus node name
                 Period = 0.0000005 //Compulsory. Period between signal samples.
                 AutomaticSegmentation = 0
                 MakeSegmentAfterNWrites = 100000
                 }
                 ADC2_0 = { //As many as required.
                 NodeName = "DATA2"  //Compulsory. MDSplus node name
                 Period = 0.0000005 //Compulsory. Period between signal samples.
                 AutomaticSegmentation = 0
                 MakeSegmentAfterNWrites = 100000
                 }*/

                C49= { //As many as required.
                    NodeName = "C49"//Compulsory. MDSplus node name
                    Period = 0.0001//Compulsory. Period between signal $
                    AutomaticSegmentation = 0
                    MakeSegmentAfterNWrites = 100000
                }

                C47= { //As many as required.
                    NodeName = "C47"//Compulsory. MDSplus node name
                    Period = 0.0001//Compulsory. Period between signal $
                    AutomaticSegmentation = 0
                    MakeSegmentAfterNWrites = 100000
                }

                C253= { //As many as required.
                    NodeName = "C253"//Compulsory. MDSplus node name
                    Period = 0.0001//Compulsory. Period between signal $
                    AutomaticSegmentation = 0
                    MakeSegmentAfterNWrites = 100000
                }
                D49= { //As many as required.
                    NodeName = "D49"//Compulsory. MDSplus node name
                    Period = 0.0001//Compulsory. Period between signal $
                    AutomaticSegmentation = 0
                    MakeSegmentAfterNWrites = 100000
                }

                C47_bis= { //As many as required.
                    NodeName = "C47BIS"//Compulsory. MDSplus node name
                    Period = 0.0001//Compulsory. Period between signal $
                    AutomaticSegmentation = 0
                    MakeSegmentAfterNWrites = 100000
                }

                D47= { //As many as required.
                    NodeName = "D47"//Compulsory. MDSplus node name
                    Period = 0.0001//Compulsory. Period between signal $
                    AutomaticSegmentation = 0
                    MakeSegmentAfterNWrites = 100000
                }
                D253= { //As many as required.
                    NodeName = "D253"//Compulsory. MDSplus node name
                    Period = 0.0001//Compulsory. Period between signal $
                    AutomaticSegmentation = 0
                    MakeSegmentAfterNWrites = 100000
                }
                D47_bis= { //As many as required.
                    NodeName = "D47BIS"//Compulsory. MDSplus node name
                    Period = 0.0001//Compulsory. Period between signal $
                    AutomaticSegmentation = 0
                    MakeSegmentAfterNWrites = 100000
                }

                SinWave = { //As many as required.
                    NodeName = "SINGEN"//Compulsory. MDSplus node name
                    Period = 0.000001//Compulsory. Period between signal $
                    AutomaticSegmentation = 0
                    MakeSegmentAfterNWrites = 100000
                }
                OneSampleSin= { //As many as required.
                    NodeName = "SINREAD"//Compulsory. MDSplus node name
                    Period = 0.0001//Compulsory. Period between signal $
                    AutomaticSegmentation = 0
                    MakeSegmentAfterNWrites = 100000
                }

            }
        }
        +Timer = {
            //Class = LinuxTimer
            Class = LinuxTimer::TerminatorLinuxTimer
            SleepNature = "Default"//"Busy"
            //SleepNature = "Default"
            ExecutionMode = RealTimeThread
            //ExecutionMode = IndependentThread
            CPUMask = 0x04
            //IncrementsPerCycle = 100 // If not defined it is taken from the configured Timer frequency
            //StartTime=-1.0 // If not set starttime is 0
            //StopTime=4.0 // If not set runs indefinitely
            //StopTime=10.0// If not set runs indefinitely

            SkipTimer=0// If 1 runs at maximum possible speed w/o using any timer at all
            Signals = {
                CounterL = {Type = uint32}
                TimeL = {Type = uint32}
            }
            // +TermMessage1
        }
    }
    +States = {
        Class = ReferenceContainer
        +Idle = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread CPUs = 0x4
                    Functions = {
                        GAMTimerL
                        //LoggerBroker
                    }
                }
            }
        }
        +Run = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x4
                    Functions = {GAMTimer MultiSinGAM RFMOutput RFMInput OneSample GAMDisplay} /* RFMInput*/
                }
            }
        }
    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}

